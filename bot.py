# bot.py (Hibrid Modell - Teljes, V√©gleges Verzi√≥)

import os
import telegram
import pytz
import asyncio
import stripe
import requests
from functools import wraps
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext
from supabase import create_client, Client
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# --- Konfigur√°ci√≥ ---
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
stripe.api_key = os.environ.get("STRIPE_SECRET_KEY")
HUNGARY_TZ = pytz.timezone('Europe/Budapest')

ADMIN_CHAT_ID = 1326707238

def get_db_client():
    return create_client(SUPABASE_URL, SUPABASE_KEY)

# --- Dekor√°torok ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: telegram.Update, context: CallbackContext, *args, **kwargs):
        if update.effective_user.id != ADMIN_CHAT_ID: return
        return await func(update, context, *args, **kwargs)
    return wrapped

def is_user_subscribed(user_id: int) -> bool:
    if user_id == ADMIN_CHAT_ID: return True
    try:
        supabase = get_db_client()
        res = supabase.table("felhasznalok").select("subscription_status, subscription_expires_at").eq("chat_id", user_id).maybe_single().execute()
        if res and res.data and res.data.get("subscription_status") == "active":
            expires_at_str = res.data.get("subscription_expires_at")
            if expires_at_str:
                expires_at = datetime.fromisoformat(expires_at_str.replace('Z', '+00:00'))
                if expires_at > datetime.now(pytz.utc):
                    return True
    except Exception as e:
        print(f"Hiba az el≈ëfizet≈ë ellen≈ërz√©sekor ({user_id}): {e}")
    return False

def subscriber_only(func):
    @wraps(func)
    async def wrapped(update: telegram.Update, context: CallbackContext, *args, **kwargs):
        is_active = await asyncio.to_thread(is_user_subscribed, update.effective_user.id)
        if is_active:
            return await func(update, context, *args, **kwargs)
        else:
            await context.bot.send_message(chat_id=update.effective_user.id, text="Ez a funkci√≥ csak √©rv√©nyes el≈ëfizet√©ssel √©rhet≈ë el.")
    return wrapped

# --- Konstansok & Seg√©df√ºggv√©nyek ---
def get_tip_details(tip_text):
    tip_map = { "Home": "Hazai nyer", "Away": "Vend√©g nyer", "Over 2.5": "G√≥lok 2.5 felett", "Over 1.5": "G√≥lok 1.5 felett", "BTTS": "Mindk√©t csapat szerez g√≥lt", "1X": "Dupla es√©ly: 1X", "X2": "Dupla es√©ly: X2" }
    return tip_map.get(tip_text, tip_text)

# --- FELHASZN√ÅL√ìI FUNKCI√ìK ---
async def start(update: telegram.Update, context: CallbackContext):
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    if context.args and len(context.args) > 0:
        token = context.args[0]
        def connect_account():
            supabase = get_db_client()
            res = supabase.table("felhasznalok").select("id").eq("telegram_connect_token", token).single().execute()
            if res.data:
                supabase.table("felhasznalok").update({"chat_id": chat_id, "telegram_connect_token": None}).eq("id", res.data['id']).execute()
                return True
            return False
        
        success = await asyncio.to_thread(connect_account)
        if success:
            await context.bot.send_message(chat_id=chat_id, text="‚úÖ Sikeres √∂sszek√∂t√©s! Mostant√≥l itt is kapsz √©rtes√≠t√©st a friss tippekr≈ël.")
        else:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå Hiba: Az √∂sszek√∂t≈ë link √©rv√©nytelen vagy lej√°rt.")
        return

    # Norm√°l /start parancs, ami a weboldalra ir√°ny√≠t
    keyboard = [[InlineKeyboardButton("üöÄ Ugr√°s a Weboldalra", url="https://mondomatutit.hu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=f"Szia {user.first_name}! üëã\n\nA szolg√°ltat√°s √°tk√∂lt√∂z√∂tt a weboldalunkra. K√©rlek, ott regisztr√°lj √©s fizess el≈ë a tippek megtekint√©s√©hez.", reply_markup=reply_markup)

async def activate_subscription_and_notify_web(user_id: int, duration_days: int, stripe_customer_id: str):
    try:
        def _activate_sync():
            supabase = get_db_client()
            expires_at = datetime.now(pytz.utc) + timedelta(days=duration_days)
            supabase.table("felhasznalok").update({
                "subscription_status": "active", 
                "subscription_expires_at": expires_at.isoformat(),
                "stripe_customer_id": stripe_customer_id
            }).eq("id", user_id).execute()
        
        await asyncio.to_thread(_activate_sync)
        print(f"WEB: A(z) {user_id} azonos√≠t√≥j√∫ felhaszn√°l√≥ el≈ëfizet√©se sikeresen aktiv√°lva.")
        
    except Exception as e:
        print(f"Hiba a WEBES automatikus aktiv√°l√°s sor√°n (user_id: {user_id}): {e}")

# --- ADMIN FUNKCI√ìK ---
@admin_only
async def admin_menu(update: telegram.Update, context: CallbackContext):
    # Az admin men√º egyszer≈±s√≠tve, mivel a f≈ë funkci√≥k a weben vannak
    keyboard = [[InlineKeyboardButton("üåê Ugr√°s a Weboldalra", url="https://mondomatutit.hu/vip")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Admin Panel:\nA f≈ë funkci√≥k (statisztika, eredm√©nyek) a weboldalon √©rhet≈ëek el bejelentkez√©s ut√°n.", reply_markup=reply_markup)

# --- HANDLER REGISZTR√ÅCI√ì ---
def add_handlers(application: Application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_menu))
    print("Bot handlerek hozz√°adva.")
    return application
