# bot.py (V6.9 - Helyre√°ll√≠tott Stripe funkci√≥k, √∫j admin gombok, t√∂rl√©si logika)

import os
import telegram
import pytz
import asyncio
import stripe
import requests
import json
from functools import wraps
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, PicklePersistence
from supabase import create_client, Client
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import math

# --- Konfigur√°ci√≥ ---
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
SUPABASE_SERVICE_KEY = os.environ.get("SUPABASE_SERVICE_KEY")
stripe.api_key = os.environ.get("STRIPE_SECRET_KEY")
HUNGARY_TZ = pytz.timezone('Europe/Budapest')

# A helyes k√∂rnyezeti v√°ltoz√≥ nevet haszn√°ljuk (ahogy a YML-ben be√°ll√≠tottuk)
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_CHAT_ID_STR = os.environ.get("ADMIN_CHAT_ID") # Stringk√©nt olvassuk be
ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_STR) if ADMIN_CHAT_ID_STR else None # Integer-k√©nt t√°roljuk

AWAITING_BROADCAST = 0
AWAITING_VIP_BROADCAST = 1

# --- Seg√©df√ºggv√©nyek ---
def get_db_client():
    return create_client(SUPABASE_URL, SUPABASE_KEY)

HUNGARIAN_MONTHS = ["janu√°r", "febru√°r", "m√°rcius", "√°prilis", "m√°jus", "j√∫nius", "j√∫lius", "augusztus", "szeptember", "okt√≥ber", "november", "december"]

def is_admin(chat_id: int) -> bool:
    return chat_id == ADMIN_CHAT_ID

def check_subscription_status(user_id: str):
    supabase = get_db_client()
    try:
        response = supabase.table("profiles").select("subscription_expires_at").eq("id", user_id).execute()
        if response.data:
            expires_at_str = response.data[0].get("subscription_expires_at")
            if expires_at_str:
                expires_at = datetime.fromisoformat(expires_at_str).astimezone(pytz.utc)
                if expires_at > datetime.now(pytz.utc):
                    return True, expires_at
        return False, None
    except Exception as e:
        print(f"Hiba az el≈ëfizet√©s ellen≈ërz√©sekor: {e}")
        return False, None

async def get_bot_username(context: CallbackContext):
    if "bot_username" not in context.bot_data:
        bot_info = await context.bot.get_me()
        context.bot_data["bot_username"] = bot_info.username
    return context.bot_data["bot_username"]
    
async def format_statistics(supabase_client: Client, period: str, user_id: str = None):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    today = datetime.now(HUNGARY_TZ).date()
    query = supabase_client.table("meccsek").select("eredmeny", "odds")

    if period == "today":
        start_date = today
        query = query.gte("created_at", str(start_date))
    elif period == "weekly":
        start_date = today - timedelta(days=today.weekday())
        query = query.gte("created_at", str(start_date))
    elif period == "monthly":
        start_date = today.replace(day=1)
        query = query.gte("created_at", str(start_date))
    elif period == "all_time":
        pass
    else:
        return "√ârv√©nytelen id≈ëszak."

    if user_id:
        profile_response = supabase_client.table("profiles").select("created_at").eq("id", user_id).execute()
        if profile_response.data:
            user_created_at = datetime.fromisoformat(profile_response.data[0]["created_at"]).astimezone(HUNGARY_TZ).date()
            if period != "all_time" and user_created_at > start_date:
                start_date = user_created_at
                query = supabase_client.table("meccsek").select("eredmeny", "odds").gte("created_at", str(start_date))
        else:
            return "Hiba: Felhaszn√°l√≥i profil nem tal√°lhat√≥."

    try:
        response = query.execute()
        if not response.data:
            return "Nincsenek adatok a megadott id≈ëszakra."

        nyert = 0
        vesztett = 0
        ervenytelen = 0
        profit = 0.0
        stake = 1.0 

        for tipp in response.data:
            if tipp["eredmeny"] == "Nyert":
                nyert += 1
                profit += (tipp["odds"] - 1) * stake
            elif tipp["eredmeny"] == "Vesz√≠tett":
                vesztett += 1
                profit -= stake
            else:
                ervenytelen += 1

        total_tipp = nyert + vesztett
        talalati_arany = (nyert / total_tipp * 100) if total_tipp > 0 else 0
        roi = (profit / total_tipp * 100) if total_tipp > 0 else 0

        period_map = {
            "today": "Mai",
            "weekly": "Heti",
            "monthly": "Havi",
            "all_time": "Teljes"
        }
        
        stat_message = (
            f"üìä *{period_map[period]} Statisztika*\n\n"
            f"‚úÖ Nyert: {nyert} db\n"
            f"‚ùå Vesz√≠tett: {vesztett} db\n"
            f"‚ö™Ô∏è √ârv√©nytelen: {ervenytelen} db\n"
            f"üìà Tal√°lati ar√°ny: {talalati_arany:.2f}%\n"
            f"üí∞ Profit: {profit:.2f} egys√©g\n"
            f"üéØ ROI: {roi:.2f}%"
        )
        return stat_message
    except Exception as e:
        print(f"Hiba a statisztika k√©sz√≠t√©sekor: {e}")
        return f"Hiba a statisztika k√©sz√≠t√©sekor: {e}"

async def format_free_tip_statistics(supabase_client: Client):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    today = datetime.now(HUNGARY_TZ).date()
    start_of_month = today.replace(day=1)
    
    try:
        query = supabase_client.table("free_tips").select("eredmeny", "odds").gte("created_at", str(start_of_month))
        response = query.execute()
        
        if not response.data:
            return "Ebben a h√≥napban m√©g nem volt ingyenes tipp."

        nyert = 0
        vesztett = 0
        ervenytelen = 0
        profit = 0.0
        stake = 1.0

        for tipp in response.data:
            if tipp["eredmeny"] == "Nyert":
                nyert += 1
                profit += (tipp["odds"] - 1) * stake
            elif tipp["eredmeny"] == "Vesz√≠tett":
                vesztett += 1
                profit -= stake
            else:
                ervenytelen += 1

        total_tipp = nyert + vesztett
        talalati_arany = (nyert / total_tipp * 100) if total_tipp > 0 else 0
        roi = (profit / total_tipp * 100) if total_tipp > 0 else 0

        current_month_hu = HUNGARIAN_MONTHS[today.month - 1]
        stat_message = (
            f"üìä *Ingyenes Tippek ({current_month_hu})*\n\n"
            f"‚úÖ Nyert: {nyert} db\n"
            f"‚ùå Vesz√≠tett: {vesztett} db\n"
            f"üìà Tal√°lati ar√°ny: {talalati_arany:.2f}%\n"
            f"üí∞ Profit: {profit:.2f} egys√©g\n"
            f"üéØ ROI: {roi:.2f}%"
        )
        return stat_message
    except Exception as e:
        print(f"Hiba az ingyenes statisztika k√©sz√≠t√©sekor: {e}")
        return f"Hiba az ingyenes statisztika k√©sz√≠t√©sekor: {e}"

# --- Telegram Parancs Kezel≈ëk (Minim√°lis jav√≠t√°sokkal) ---

async def start(update: Update, context: CallbackContext):
    """
    Kezeli a /start parancsot.
    JAV√çTVA: A /start hiba (a logban l√°that√≥) jav√≠tva.
    """
    chat_id = update.message.chat_id
    user_id_str = str(chat_id)
    supabase = get_db_client()
    
    try:
        # El≈ësz√∂r ellen≈ërizz√ºk, hogy a chat_id m√°r regisztr√°lva van-e
        response = supabase.table("profiles").select("id, subscription_expires_at").eq("telegram_chat_id", user_id_str).execute()
        
        if response.data:
            user_uuid = response.data[0]["id"]
            subscribed, expires_at = check_subscription_status(user_uuid)
            if subscribed:
                expires_at_hu = expires_at.astimezone(HUNGARY_TZ).strftime('%Y-%m-%d %H:%M')
                await update.message.reply_text(f"√údv√∂z√∂llek √∫jra! ‚úÖ Akt√≠v el≈ëfizet√©sed van eddig: {expires_at_hu}")
            else:
                await update.message.reply_text("√údv√∂z√∂llek √∫jra! Sajnos nincs akt√≠v el≈ëfizet√©sed.")
            await show_main_menu(update, context)
            return

        # Ha nincs regisztr√°lva, ellen≈ërizz√ºk, hogy ez egy /link parancs-e
        args = context.args
        if args:
            token = args[0]
            # A /start parancs nem /link parancs, ez√©rt √°tir√°ny√≠tjuk
            await context.bot.send_message(chat_id=chat_id, text=f"K√©rlek, a kapott k√≥dot a /link paranccsal k√ºldd be:\n\n`/link {token}`", parse_mode=telegram.constants.ParseMode.MARKDOWN)
            return

        # Ha se nem regisztr√°lt, se nem link, akkor az √ºdv√∂zl≈ë √ºzenet
        bot_username = await get_bot_username(context)
        await update.message.reply_text(
            "√údv√∂z√∂llek a Mondom a Tutit! Botn√°l!\n\n"
            "A bot haszn√°lat√°hoz √∂ssze kell k√∂tn√∂d a Telegram fi√≥kodat a weboldalon regisztr√°lt fi√≥koddal.\n\n"
            "1. L√°togass el ide: https://mondom-a-tutit.onrender.com/register\n"
            "2. Regisztr√°ci√≥ ut√°n a Profil oldalon tal√°lsz egy linket.\n"
            f"3. K√ºldd el a linket a botnak (pl. `/link 12345-abcde...`) vagy kattints r√° a weboldalon (ha mobilon vagy)."
        )
            
    except Exception as e:
        print(f"Hiba a /start parancsban: {e}")
        await update.message.reply_text(f"Hiba t√∂rt√©nt az adatb√°zis kapcsolatban. Pr√≥b√°ld √∫jra k√©s≈ëbb. {e}")

async def link(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    chat_id = update.message.chat_id
    try:
        user_id_str = context.args[0]
        supabase = get_db_client()
        response = supabase.table("telegram_links").select("*").eq("id", user_id_str).execute()
        
        if not response.data:
            await update.message.reply_text("Hiba: √ârv√©nytelen vagy lej√°rt √∂sszekapcsol√°si k√≥d.")
            return

        link_data = response.data[0]
        user_uuid = link_data.get("user_id")
        
        if not user_uuid:
            await update.message.reply_text("Hiba: A k√≥dhoz nem tartozik felhaszn√°l√≥.")
            return

        update_response = supabase.table("profiles").update({"telegram_chat_id": str(chat_id)}).eq("id", user_uuid).execute()
        
        if update_response.data:
            supabase.table("telegram_links").delete().eq("id", user_id_str).execute()
            await update.message.reply_text("‚úÖ Sikeres √∂sszekapcsol√°s! A fi√≥kod mostant√≥l √∂ssze van k√∂tve a Telegrammal.")
            await show_main_menu(update, context)
        else:
            await update.message.reply_text("Hiba t√∂rt√©nt a profilod friss√≠t√©se sor√°n.")

    except (IndexError, TypeError):
        await update.message.reply_text("Hiba: Hi√°nyz√≥ √∂sszekapcsol√°si k√≥d. Helyes form√°tum: /link <k√≥d>")
    except Exception as e:
        print(f"Hiba a /link parancsban: {e}")
        await update.message.reply_text(f"Adatb√°zis hiba t√∂rt√©nt az √∂sszekapcsol√°s sor√°n. {e}")

async def show_main_menu(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    chat_id = update.message.chat_id
    supabase = get_db_client()
    profile_response = supabase.table("profiles").select("id").eq("telegram_chat_id", str(chat_id)).execute()
    
    if not profile_response.data:
        await update.message.reply_text("K√©rlek, el≈ësz√∂r kapcsold √∂ssze a fi√≥kodat a /start paranccsal.")
        return

    user_uuid = profile_response.data[0]["id"]
    subscribed, expires_at = check_subscription_status(user_uuid)
    
    keyboard = [
        [InlineKeyboardButton("üìä Havi Statisztika", callback_data="stats_monthly")],
        [InlineKeyboardButton("üìä Teljes Statisztika", callback_data="stats_all_time")],
        [InlineKeyboardButton("üìä Ingyenes Tippek Statisztik√°ja", callback_data="stats_free_tips")],
    ]
    
    if subscribed:
        expires_at_hu = expires_at.astimezone(HUNGARY_TZ).strftime('%Y-%m-%d')
        await update.message.reply_text(f"‚úÖ Akt√≠v el≈ëfizet√©sed van eddig: {expires_at_hu}\nV√°lassz az al√°bbi lehet≈ës√©gek k√∂z√ºl:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("‚ùå Nincs akt√≠v el≈ëfizet√©sed.\nL√°togass el a weboldalra a csomagok√©rt.", reply_markup=InlineKeyboardMarkup(keyboard))

async def stats_menu(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    keyboard = [
        [
            InlineKeyboardButton("Mai", callback_data="stats_today"),
            InlineKeyboardButton("Heti", callback_data="stats_weekly"),
            InlineKeyboardButton("Havi", callback_data="stats_monthly"),
            InlineKeyboardButton("Teljes", callback_data="stats_all_time")
        ],
        [InlineKeyboardButton("üìä Ingyenes Tippek (Havi)", callback_data="stats_free_tips")],
        [InlineKeyboardButton("Bez√°r√°s", callback_data="admin_close")]
    ]
    if update.callback_query:
        await update.callback_query.message.reply_text("Melyik id≈ëszak statisztik√°j√°t k√©red?", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("Melyik id≈ëszak statisztik√°j√°t k√©red?", reply_markup=InlineKeyboardMarkup(keyboard))

# --- Admin Parancsok (V√°ltozatlanok) ---

async def admin_menu(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    if not is_admin(update.message.chat_id):
        await update.message.reply_text("Nincs jogosults√°god ehhez a parancshoz.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üì¢ K√∂rlev√©l (Mindenki)", callback_data="admin_broadcast_start")],
        [InlineKeyboardButton("‚≠êÔ∏è K√∂rlev√©l (VIP)", callback_data="admin_vip_broadcast_start")],
        [InlineKeyboardButton("üìä Statisztika Men√º", callback_data="admin_stats_menu")],
        [InlineKeyboardButton("‚öôÔ∏è API Kulcs Teszt", callback_data="admin_test_key")],
        [InlineKeyboardButton("Bez√°r√°s", callback_data="admin_close")]
    ]
    await update.message.reply_text("Admin men√º:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_broadcast_start(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("K√©rlek, k√ºldd el a k√∂rlev√©l sz√∂veg√©t (mindenkinek). √çrd be a /cancel parancsot a megszak√≠t√°shoz.")
    return AWAITING_BROADCAST
    
async def admin_vip_broadcast_start(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("K√©rlek, k√ºldd el a VIP k√∂rlev√©l sz√∂veg√©t. √çrd be a /cancel parancsot a megszak√≠t√°shoz.")
    return AWAITING_VIP_BROADCAST

async def broadcast_message_to_users(context: CallbackContext, message_text: str, vip_only: bool):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    supabase = get_db_client()
    query = supabase.table("profiles").select("telegram_chat_id, id")
    
    if vip_only:
        query = query.not_.is_("telegram_chat_id", "null")
    else:
        query = query.not_.is_("telegram_chat_id", "null")

    try:
        response = query.execute()
        if not response.data:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="Nincsenek felhaszn√°l√≥k a k√∂rlev√©lhez.")
            return 0
        
        sent_count = 0
        failed_count = 0
        
        for user in response.data:
            chat_id = user["telegram_chat_id"]
            user_uuid = user["id"]
            
            should_send = True
            if vip_only:
                is_subscribed, _ = check_subscription_status(user_uuid)
                if not is_subscribed:
                    should_send = False

            if should_send and chat_id:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=message_text, parse_mode=telegram.constants.ParseMode.MARKDOWN)
                    sent_count += 1
                except Exception as e:
                    print(f"Hiba k√ºld√©skor (Chat ID: {chat_id}): {e}")
                    failed_count += 1
                await asyncio.sleep(0.1) 
                
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"K√∂rlev√©l befejezve.\nSikeres: {sent_count}\nSikertelen: {failed_count}")
        return sent_count

    except Exception as e:
        print(f"Hiba a felhaszn√°l√≥k lek√©rdez√©sekor: {e}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"Hiba a k√∂rlev√©l k√ºld√©sekor: {e}")
        return 0

async def admin_broadcast_message_handler(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    message_text = update.message.text
    await broadcast_message_to_users(context, message_text, vip_only=False)
    return ConversationHandler.END

async def admin_vip_broadcast_message_handler(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    message_text = update.message.text
    await broadcast_message_to_users(context, message_text, vip_only=True)
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    await update.message.reply_text("M≈±velet megszak√≠tva.")
    return ConversationHandler.END

async def test_service_key(update: Update, context: CallbackContext):
    # ... (V√°ltozatlan a V6.7-b≈ël)
    if not SUPABASE_SERVICE_KEY:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="Hiba: SUPABASE_SERVICE_KEY nincs be√°ll√≠tva.")
        return
    try:
        service_supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        response = service_supabase.table("profiles").select("id", count="exact").execute()
        count = response.count
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ Service Key m≈±k√∂dik. √ñsszes profil: {count} db.")
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå Service Key HIBA: {e}")

# ---
# --- √öJ/M√ìDOS√çTOTT FUNKCI√ìK (V6.9) ---
# ---

async def handle_approve_tips(update: Update, context: CallbackContext):
    """
    Kezeli az √∫j, d√°tum-alap√∫ 'approve_tips:DATUM' callback-et.
    """
    await update.callback_query.answer()
    query = update.callback_query
    
    if not is_admin(query.message.chat_id):
        await context.bot.send_message(chat_id=query.message.chat_id, text="Nincs jogosults√°god.")
        return

    try:
        callback_data = query.data
        # A callback adat form√°tuma: "approve_tips:2025-10-31"
        date_str = callback_data.split(":")[1]
        
        supabase = get_db_client()
        response = supabase.table("daily_status").update({"status": "J√≥v√°hagyva"}).eq("date", date_str).execute()
        
        if response.data:
            text = f"‚úÖ A(z) {date_str} napi tippek j√≥v√°hagyva √©s kik√ºld√©sre √ºtemezve."
        else:
            text = f"‚ö†Ô∏è Hiba: Nem siker√ºlt a(z) {date_str} napi tippek j√≥v√°hagy√°sa (St√°tusz nem tal√°lhat√≥)."
        
        # Gombok elt√°vol√≠t√°sa az eredeti √ºzenetr≈ël
        await query.message.edit_reply_markup(reply_markup=None)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text)
        
    except Exception as e:
        print(f"Hiba a tippek j√≥v√°hagy√°sakor (V6.9): {e}")
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"Hiba a j√≥v√°hagy√°s sor√°n: {e}")

async def handle_reject_tips(update: Update, context: CallbackContext):
    """
    Kezeli az √∫j, d√°tum-alap√∫ 'reject_tips:DATUM' callback-et.
    Friss√≠ti a st√°tuszt √âS T√ñR√ñL minden kapcsol√≥d√≥ tippet (a k√©r√©sed alapj√°n).
    """
    await update.callback_query.answer()
    query = update.callback_query
    
    if not is_admin(query.message.chat_id):
        await context.bot.send_message(chat_id=query.message.chat_id, text="Nincs jogosults√°god.")
        return

    try:
        callback_data = query.data
        # A callback adat form√°tuma: "reject_tips:2025-10-31"
        date_str = callback_data.split(":")[1]
        
        supabase = get_db_client()

        # 1. St√°tusz √°t√°ll√≠t√°sa "Nincs megfelel≈ë tipp"-re
        response_status = supabase.table("daily_status").update({"status": "Nincs megfelel≈ë tipp"}).eq("date", date_str).execute()
        
        if not response_status.data:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ö†Ô∏è Hiba: Nem siker√ºlt a(z) {date_str} napi st√°tusz √°t√°ll√≠t√°sa.")
            return

        # 2. Megkeress√ºk az √∂sszes 'napi_tuti' szelv√©nyt erre a napra
        search_pattern = f"%{date_str}%"
        response_slips = supabase.table("napi_tuti").select("id, tipp_id_k").ilike("tipp_neve", search_pattern).execute()
        
        slip_ids_to_delete = []
        match_ids_to_delete = []
        
        if response_slips.data:
            for slip in response_slips.data:
                slip_ids_to_delete.append(slip['id'])
                if slip['tipp_id_k']:
                    # A 'tipp_id_k' egy lista (pl. [123, 456])
                    match_ids_to_delete.extend(slip['tipp_id_k'])
            
            # 3. T√∂r√∂lj√ºk a 'meccsek'-et (a kapcsol√≥d√≥ tippeket)
            if match_ids_to_delete:
                unique_match_ids = list(set(match_ids_to_delete))
                print(f"T√∂rl√©sre v√°r√≥ meccs ID-k: {unique_match_ids}")
                supabase.table("meccsek").delete().in_("id", unique_match_ids).execute()
            
            # 4. T√∂r√∂lj√ºk a 'napi_tuti' szelv√©nyeket
            print(f"T√∂rl√©sre v√°r√≥ szelv√©ny ID-k: {slip_ids_to_delete}")
            supabase.table("napi_tuti").delete().in_("id", slip_ids_to_delete).execute()

        # 5. Visszajelz√©s az adminnak
        text = f"‚ùå A(z) {date_str} napi tippek elutas√≠tva √©s sikeresen t√∂r√∂lve az adatb√°zisb√≥l."
        await query.message.edit_reply_markup(reply_markup=None)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text)

    except Exception as e:
        print(f"Hiba a tippek elutas√≠t√°sakor/t√∂rl√©sekor (V6.9): {e}")
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"Hiba az elutas√≠t√°s/t√∂rl√©s sor√°n: {e}")

# --- HELYRE√ÅLL√çTOTT FUNKCI√ìK (a main.py miatt kellenek) ---

async def activate_subscription_and_notify_web(customer_id: str, plan_name: str, expires_at: datetime):
    """
    A Stripe webhook h√≠vja meg. Aktiv√°lja az el≈ëfizet√©st √©s √ºzenetet k√ºld a felhaszn√°l√≥nak.
    EZ A F√úGGV√âNY HI√ÅNYZOTT (V6.9).
    """
    supabase = get_db_client()
    print(f"Stripe webhook: El≈ëfizet√©s aktiv√°l√°sa a {customer_id} √ºgyf√©lnek.")
    
    try:
        # 1. Keress√ºk meg a felhaszn√°l√≥t a customer_id alapj√°n
        profile_response = supabase.table("profiles").select("id, telegram_chat_id").eq("stripe_customer_id", customer_id).single().execute()
        
        if not profile_response.data:
            print(f"HIBA: Nem tal√°lhat√≥ profil a {customer_id} Stripe customer ID-val.")
            return

        user_data = profile_response.data
        user_uuid = user_data["id"]
        chat_id = user_data.get("telegram_chat_id")

        # 2. Friss√≠ts√ºk az el≈ëfizet√©s lej√°rati idej√©t
        supabase.table("profiles").update({"subscription_expires_at": expires_at.isoformat()}).eq("id", user_uuid).execute()
        
        print(f"Sikeres friss√≠t√©s a {user_uuid} felhaszn√°l√≥nak. Lej√°rat: {expires_at}")

        # 3. √ârtes√≠ts√ºk a felhaszn√°l√≥t Telegramon (ha kapcsolt fi√≥kot)
        if chat_id:
            plan_translation = {
                "Havi": "Havi csomag",
                "Heti": "Heti csomag",
            }
            plan_display_name = plan_translation.get(plan_name, plan_name)
            expires_at_hu = expires_at.astimezone(HUNGARY_TZ).strftime('%Y-%m-%d %H:%M')
            
            message_text = (
                f"üéâ Sikeres el≈ëfizet√©s!\n\n"
                f"Akt√≠v csomagod: *{plan_display_name}*\n"
                f"El≈ëfizet√©sed √©rv√©nyes eddig: *{expires_at_hu}*\n\n"
                "K√∂sz√∂nj√ºk, hogy a Mondom a Tutit! szolg√°ltat√°st v√°lasztottad!"
            )
            # Aszinkron √ºzenetk√ºld√©s
            app = Application.builder().token(TELEGRAM_TOKEN).build()
            await app.bot.send_message(chat_id=chat_id, text=message_text, parse_mode=telegram.constants.ParseMode.MARKDOWN)

    except Exception as e:
        print(f"!!! KRITIKUS HIBA az el≈ëfizet√©s aktiv√°l√°sakor: {e}")
        # Hiba eset√©n is pr√≥b√°ljuk meg logolni, de ne akasszuk meg a webhookot
        pass

async def get_tip_details(tip_name: str) -> dict:
    """
    Lek√©ri a tipp r√©szleteit a Stripe sz√°m√°ra (pl. "Havi" -> 9999 HUF).
    EZ A F√úGGV√âNY HI√ÅNYZOTT (V6.9).
    """
    # Ez a funkci√≥ a main.py-b≈ël (Stripe) van h√≠vva, de √∫gy t≈±nik,
    # a V6.7-es bot.py-ban nem volt implement√°lva. Egy alap implement√°ci√≥t adunk neki.
    if tip_name == "Havi":
        return {"price_id": os.environ.get("STRIPE_PRICE_ID_MONTHLY"), "name": "Havi csomag"}
    elif tip_name == "Heti":
        return {"price_id": os.environ.get("STRIPE_PRICE_ID_WEEKLY"), "name": "Heti csomag"}
    else:
        # Alap√©rtelmezett (vagy hibakezel√©s)
        return {"price_id": os.environ.get("STRIPE_PRICE_ID_MONTHLY"), "name": "Ismeretlen csomag"}


async def button_handler(update: Update, context: CallbackContext):
    """ Gombkezel≈ë a statikus men√ºkh√∂z (statisztika, admin men√º) """
    query = update.callback_query
    await query.answer() 
    
    if not query.data:
        return

    # Statisztika gombok
    if query.data.startswith("stats_"):
        chat_id = query.message.chat_id
        period = query.data.split("_")[1]
        
        if period == "free": # 'stats_free_tips' eset√©n
            period = "free_tips"

        supabase = get_db_client()
        
        if period == "free_tips":
            stat_message = await format_free_tip_statistics(supabase)
        else:
            profile_response = supabase.table("profiles").select("id").eq("telegram_chat_id", str(chat_id)).execute()
            user_uuid = profile_response.data[0]["id"] if profile_response.data else None
            stat_message = await format_statistics(supabase, period, user_uuid)
            
        await query.message.reply_text(stat_message, parse_mode=telegram.constants.ParseMode.MARKDOWN)

    # Admin gombok
    elif query.data == "admin_stats_menu":
        await stats_menu(query, context)
    elif query.data == "admin_test_key":
        await test_service_key(query, context)
    elif query.data == "admin_close":
        await query.answer()
        await query.message.delete()

def add_handlers(application: Application):
    """ Hozz√°adja a parancs √©s gombkezel≈ëket az alkalmaz√°shoz. """
    
    # Konverzi√≥s kezel≈ëk (Admin k√∂rlevelek)
    broadcast_conv = ConversationHandler(entry_points=[CallbackQueryHandler(admin_broadcast_start, pattern='^admin_broadcast_start$')], states={AWAITING_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_message_handler)]}, fallbacks=[CommandHandler("cancel", cancel_conversation)])
    vip_broadcast_conv = ConversationHandler(entry_points=[CallbackQueryHandler(admin_vip_broadcast_start, pattern='^admin_vip_broadcast_start$')], states={AWAITING_VIP_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_vip_broadcast_message_handler)]}, fallbacks=[CommandHandler("cancel", cancel_conversation)])
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("link", link))
    application.add_handler(CommandHandler("menu", show_main_menu))
    application.add_handler(CommandHandler("stats", stats_menu))
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(broadcast_conv)
    application.add_handler(vip_broadcast_conv)
    
    # --- M√ìDOS√çTOTT HANDLEREK (V6.9) ---
    # A r√©gi, ID-alap√∫ kezel≈ëk ('_') helyett az √∫j, d√°tum-alap√∫akat (':') figyelj√ºk
    application.add_handler(CallbackQueryHandler(handle_approve_tips, pattern='^approve_tips:'))
    application.add_handler(CallbackQueryHandler(handle_reject_tips, pattern='^reject_tips:'))
    # --- M√ìDOS√çT√ÅS V√âGE ---
    
    # A r√©gi 'confirm_send_' kezel≈ët elt√°vol√≠tottuk, mert m√°r nem haszn√°ljuk
    
    # Az √°ltal√°nos gombkezel≈ë (stats, admin men√º gombjai)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("Minden parancs- √©s gombkezel≈ë sikeresen hozz√°adva.")

# --- F≈ë ind√≠t√°si pont ---
def main():
    if not TELEGRAM_TOKEN:
        print("!!! KRITIKUS HIBA: TELEGRAM_TOKEN nincs be√°ll√≠tva. A bot nem indul el.")
        return

    print("Bot ind√≠t√°sa (V6.9)...")
    
    persistence = PicklePersistence(filepath="./bot_persistence")
    
    application = Application.builder().token(TELEGRAM_TOKEN).persistence(persistence).build()
    
    add_handlers(application)
    
    print("A bot fut. V√°rakoz√°s √ºzenetre...")
    application.run_polling()

if __name__ == "__main__":
    main()
