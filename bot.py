import os
import requests
from supabase import create_client, Client
import asyncio
import logging
from datetime import datetime, timedelta
import pytz
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
import uvicorn
from fastapi import FastAPI, Request

# --- Alapbe√°ll√≠t√°sok, napl√≥z√°s ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- K√∂rnyezeti v√°ltoz√≥k bet√∂lt√©se ---
try:
    BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    WEBHOOK_URL = os.environ['WEBHOOK_URL']
    SUPABASE_URL = os.environ['SUPABASE_URL']
    SUPABASE_KEY = os.environ['SUPABASE_KEY']
except KeyError as e:
    logger.error(f"Hi√°nyz√≥ k√∂rnyezeti v√°ltoz√≥: {e}")
    exit(1)

# --- Supabase kliens inicializ√°l√°sa ---
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- √öJ SEG√âDF√úGGV√âNY a hossz√∫ √ºzenetek darabol√°s√°hoz ---
async def send_in_chunks(update: Update, messages: list, parse_mode: str = ParseMode.MARKDOWN_V2):
    """
    Elk√ºld egy √ºzenetlist√°t darabokban, hogy ne l√©pje t√∫l a Telegram karakterlimitj√©t.
    Minden elem a 'messages' list√°ban egy logikai egys√©get (pl. egy meccset) k√©pvisel.
    """
    MAX_LENGTH = 4096
    current_chunk = ""
    for message in messages:
        # Ellen≈ërizz√ºk, hogy a k√∂vetkez≈ë √ºzenet hozz√°ad√°s√°val t√∫ll√©pn√©nk-e a limitet
        if len(current_chunk) + len(message) > MAX_LENGTH:
            # Ha igen, elk√ºldj√ºk az eddigi darabot
            if current_chunk:
                await update.message.reply_text(current_chunk, parse_mode=parse_mode)
            # Az √∫j darab ezzel az √ºzenettel kezd≈ëdik
            current_chunk = message
        else:
            # Ha nem, hozz√°adjuk az aktu√°lis darabhoz
            current_chunk += message

    # Elk√ºldj√ºk az utols√≥ megmaradt darabot is, ha van
    if current_chunk:
        await update.message.reply_text(current_chunk, parse_mode=parse_mode)

# --- Parancsok ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """A /start parancsra v√°laszol."""
    await update.message.reply_text('Szia! A /tippek paranccsal a mai meccseket, a /stat paranccsal az eredm√©nyeket l√°thatod.')

async def get_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lek√©ri a meccseket √©s tippeket, majd elk√ºldi ≈ëket darabolva."""
    await update.message.reply_text('Pillanat, olvasom a tippeket az adatb√°zisb√≥l...')
    try:
        response_meccsek = supabase.table('meccsek').select('*').execute()
        records_meccsek = response_meccsek.data
        
        response_archivum = supabase.table('tipp_elo_zmenyek').select('meccs_id, tipp_tipusa, statusz, vegeredmeny').in_('statusz', ['Nyert', 'Vesz√≠tett']).execute()
        records_archivum = {f"{rec['meccs_id']}_{rec['tipp_tipusa']}": {'statusz': rec['statusz'], 'vegeredmeny': rec['vegeredmeny']} for rec in response_archivum.data}

        if not records_meccsek:
            await update.message.reply_text('Jelenleg nincsenek el√©rhet≈ë tippek az adatb√°zisban.')
            return

        tip_messages = [] # Lista a form√°zott meccs-tipp √ºzeneteknek
        now_in_budapest = datetime.now(pytz.timezone("Europe/Budapest"))
        INVALID_TIPS = ["N/A", "N/A (kev√©s adat)", "Neh√©z megj√≥solni", "G√≥lok sz√°ma k√©rd√©ses", "BTTS k√©rd√©ses", "Nem"]

        for row in records_meccsek:
            tip_1x2, tip_goals, tip_btts = row['tipp_1x2'], row['tipp_goals'], row['tipp_btts']
            tip_home_over_1_5 = row.get('tipp_hazai_1_5_felett', 'N/A')
            tip_away_over_1_5 = row.get('tipp_vendeg_1_5_felett', 'N/A')
            
            if any(tip not in INVALID_TIPS for tip in [tip_1x2, tip_goals, tip_btts, tip_home_over_1_5, tip_away_over_1_5]):
                date_str, home_team, away_team, liga = row['datum'], row['hazai_csapat'], row['vendeg_csapat'], row['liga']
                meccs_id = row['meccs_id']
                
                start_time_str, is_past = "Ismeretlen", False
                try:
                    utc_dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                    budapest_tz = pytz.timezone("Europe/Budapest")
                    local_dt = utc_dt.astimezone(budapest_tz)
                    start_time_str = local_dt.strftime('%H:%M')
                    if local_dt < now_in_budapest: is_past = True
                except (ValueError, TypeError): logger.warning(f"Ismeretlen d√°tum form√°tum: {date_str}")
                
                # Markdown karakterek escape-el√©se
                def escape_md(text: str) -> str:
                    # A lista b≈ëv√≠thet≈ë a speci√°lis karakterekkel
                    escape_chars = r'_*[]()~`>#+-=|{}.!'
                    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

                home_team_safe, away_team_safe, liga_safe = escape_md(home_team), escape_md(away_team), escape_md(liga)
                
                match_message = ""
                match_message += f"‚öΩ *{home_team_safe} vs {away_team_safe}*\n"
                match_message += f"üèÜ Bajnoks√°g: `{liga_safe}`\n"
                match_message += f"‚è∞ Kezd√©s: *{start_time_str}*\n"

                if is_past:
                    vegeredmeny = next((v['vegeredmeny'] for k, v in records_archivum.items() if k.startswith(f"{meccs_id}_")), "N/A")
                    match_message += f"üèÅ V√©geredm√©ny: *{escape_md(vegeredmeny)}*\n"
                    status_icon_map = {"Nyert": "‚úÖ", "Vesz√≠tett": "‚ùå"}
                    
                    # Tippek ki√©rt√©kel√©ssel
                    if tip_1x2 not in INVALID_TIPS:
                        result = records_archivum.get(f"{meccs_id}_1X2", {}); icon = status_icon_map.get(result.get('statusz'), "‚è≥")
                        match_message += f"üèÜ Eredm√©ny tipp: `{escape_md(tip_1x2)}` {icon}\n"
                    if tip_goals not in INVALID_TIPS:
                        result = records_archivum.get(f"{meccs_id}_G√≥lok O/U 2.5", {}); icon = status_icon_map.get(result.get('statusz'), "‚è≥")
                        match_message += f"ü•Ö G√≥lok O/U 2\\.5: `{escape_md(tip_goals)}` {icon}\n"
                    if tip_btts not in INVALID_TIPS:
                        result = records_archivum.get(f"{meccs_id}_BTTS", {}); icon = status_icon_map.get(result.get('statusz'), "‚è≥")
                        match_message += f"ü§ù Mindk√©t csapat szerez g√≥lt: `{escape_md(tip_btts)}` {icon}\n"
                    if tip_home_over_1_5 not in INVALID_TIPS:
                        result = records_archivum.get(f"{meccs_id}_Hazai 1.5 felett", {}); icon = status_icon_map.get(result.get('statusz'), "‚è≥")
                        match_message += f"üìà Hazai 1\\.5 g√≥l felett: `{escape_md(tip_home_over_1_5)}` {icon}\n"
                    if tip_away_over_1_5 not in INVALID_TIPS:
                        result = records_archivum.get(f"{meccs_id}_Vend√©g 1.5 felett", {}); icon = status_icon_map.get(result.get('statusz'), "‚è≥")
                        match_message += f"üìâ Vend√©g 1\\.5 g√≥l felett: `{escape_md(tip_away_over_1_5)}` {icon}\n"
                else:
                    # J√∂v≈ëbeli meccsek tippjei
                    if tip_1x2 not in INVALID_TIPS: match_message += f"üèÜ Eredm√©ny: `{escape_md(tip_1x2)}`\n"
                    if tip_goals not in INVALID_TIPS: match_message += f"ü•Ö G√≥lok O/U 2\\.5: `{escape_md(tip_goals)}`\n"
                    if tip_btts not in INVALID_TIPS: match_message += f"ü§ù Mindk√©t csapat szerez g√≥lt: `{escape_md(tip_btts)}`\n"
                    if tip_home_over_1_5 not in INVALID_TIPS: match_message += f"üìà Hazai 1\\.5 g√≥l felett: `{escape_md(tip_home_over_1_5)}`\n"
                    if tip_away_over_1_5 not in INVALID_TIPS: match_message += f"üìâ Vend√©g 1\\.5 g√≥l felett: `{escape_md(tip_away_over_1_5)}`\n"
                
                match_message += "\n" # Elv√°laszt√≥ a meccsek k√∂z√∂tt
                tip_messages.append(match_message)

        if not tip_messages:
            await update.message.reply_text("Nem tal√°lhat√≥ a mai napon olyan meccs, amihez √©rdemi tippet lehetne adni.")
            return

        # √úzenetek elk√ºld√©se darabolva az √∫j seg√©df√ºggv√©nnyel
        await send_in_chunks(update, tip_messages, parse_mode=ParseMode.MARKDOWN_V2)

    except Exception as e:
        logger.error(f"Kritikus hiba a tippek lek√©r√©se k√∂zben: {e}", exc_info=True)
        await update.message.reply_text('Hiba t√∂rt√©nt az adatok lek√©r√©se k√∂zben. Ellen≈ërizd a Render napl√≥t!')

async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lek√©ri √©s kisz√°molja a tippek statisztik√°j√°t."""
    await update.message.reply_text('Pillanat, sz√°molom a statisztik√°kat az arch√≠vumb√≥l...')
    try:
        response = supabase.table('tipp_elo_zmenyek').select('*').in_('statusz', ['Nyert', 'Vesz√≠tett']).execute()
        records = response.data
        if not records:
            await update.message.reply_text('Az arch√≠vum m√©g √ºres, nincsenek ki√©rt√©kelt tippek.')
            return
        stats = {'today': {'wins': 0, 'losses': 0}, 'yesterday': {'wins': 0, 'losses': 0}, 'last_7_days': {'wins': 0, 'losses': 0}, 'last_30_days': {'wins': 0, 'losses': 0}}
        today = datetime.now(pytz.timezone("Europe/Budapest")).date()
        yesterday = today - timedelta(days=1); seven_days_ago = today - timedelta(days=7); thirty_days_ago = today - timedelta(days=30)
        for rec in records:
            try:
                rec_date = datetime.fromisoformat(rec['datum'].replace('Z', '+00:00')).date()
                result = 'wins' if rec['statusz'] == 'Nyert' else 'losses'
                if rec_date == today: stats['today'][result] += 1
                if rec_date == yesterday: stats['yesterday'][result] += 1
                if rec_date >= seven_days_ago: stats['last_7_days'][result] += 1
                if rec_date >= thirty_days_ago: stats['last_30_days'][result] += 1
            except (ValueError, TypeError): continue
        response_message = "üìä *Tippek Eredm√©nyess√©ge*\n\n"
        def calculate_success_rate(wins, losses):
            total = wins + losses
            if total == 0: return "N/A (nincs adat)"
            rate = (wins / total) * 100
            return f"{wins}/{total} ({rate:.1f}%)"
        response_message += f"*Mai nap:*\n`{calculate_success_rate(stats['today']['wins'], stats['today']['losses'])}`\n\n"
        response_message += f"*Tegnapi nap:*\n`{calculate_success_rate(stats['yesterday']['wins'], stats['yesterday']['losses'])}`\n\n"
        response_message += f"*Elm√∫lt 7 nap:*\n`{calculate_success_rate(stats['last_7_days']['wins'], stats['last_7_days']['losses'])}`\n\n"
        response_message += f"*Elm√∫lt 30 nap:*\n`{calculate_success_rate(stats['last_30_days']['wins'], stats['last_30_days']['losses'])}`"
        await update.message.reply_text(response_message, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"Kritikus hiba a statisztika sz√°mol√°sa k√∂zben: {e}", exc_info=True)
        await update.message.reply_text('Hiba t√∂rt√©nt a statisztika sz√°mol√°sa k√∂zben.')


# --- Alkalmaz√°s √©s Webhook be√°ll√≠t√°sa (FastAPI) ---
application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("tippek", get_tips))
application.add_handler(CommandHandler("stat", get_stats))

api = FastAPI()

@api.on_event("startup")
async def startup_event():
    await application.initialize()
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"Webhook sikeresen be√°ll√≠tva a k√∂vetkez≈ë c√≠mre: {WEBHOOK_URL}/telegram")

@api.on_event("shutdown")
async def shutdown_event():
    await application.shutdown()
    logger.info("Alkalmaz√°s le√°llt.")

@api.post("/telegram")
async def telegram_webhook(request: Request):
    update = Update.de_json(data=await request.json(), bot=application.bot)
    await application.process_update(update)
    return {"status": "ok"}

# --- Futtat√°s (uvicorn-hoz) ---
# Ezt a r√©szt a Render/uvicorn kezeli, itt nincs teend≈ë.
