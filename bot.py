import os
import json
import gspread
import asyncio
import logging
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- Webszerver importok ---
import uvicorn
from fastapi import FastAPI, Request

# --- Alapvet≈ë be√°ll√≠t√°sok √©s napl√≥z√°s ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Konfigur√°ci√≥ a k√∂rnyezeti v√°ltoz√≥kb√≥l ---
try:
    BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    GOOGLE_SHEET_NAME = 'foci_bot_adatbazis'
    WORKSHEET_NAME = 'meccsek'
    # A Render √°ltal adott URL, pl. "https://foci-bot.onrender.com"
    # Ezt az Environment f√ºl√∂n kell majd be√°ll√≠tani a Render fel√ºlet√©n!
    WEBHOOK_URL = os.environ['WEBHOOK_URL']
except KeyError as e:
    logger.error(f"Hi√°nyz√≥ k√∂rnyezeti v√°ltoz√≥: {e}")
    exit(1)

# --- Google Sheets Logika ---
async def setup_google_sheets_client():
    creds_json_str = os.environ.get('GSERVICE_ACCOUNT_CREDS')
    if not creds_json_str:
        raise ValueError("A GSERVICE_ACCOUNT_CREDS titok nincs be√°ll√≠tva!")
    
    creds_dict = json.loads(creds_json_str)
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = await asyncio.to_thread(ServiceAccountCredentials.from_json_keyfile_dict, creds_dict, scope)
    client = await asyncio.to_thread(gspread.authorize, creds)
    return client

# --- Telegram Bot Parancsok ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Szia! K√ºldd a /tippek parancsot az elemz√©sek√©rt! (Webhook verzi√≥)')

async def get_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Pillanat, olvasom a tippeket a t√°bl√°zatb√≥l...')
    try:
        gs_client = await setup_google_sheets_client()
        sheet = await asyncio.to_thread(gs_client.open(GOOGLE_SHEET_NAME).worksheet, WORKSHEET_NAME)
        list_of_lists = await asyncio.to_thread(sheet.get_all_values)
        records = list_of_lists[1:]

        if not records:
            await update.message.reply_text('Jelenleg nincsenek el√©rhet≈ë tippek a t√°bl√°zatban.')
            return

        response_message = ""
        for row in records:
            # Felt√©telezz√ºk az oszlopok sorrendj√©t:
            # C: hazai (index 2), D: vend√©g (index 3), I: tipp (index 8)
            home_team, away_team, tip = row[2], row[3], row[8] # JAV√çTVA 9-r≈ël 8-ra!
            response_message += f"‚öΩ *{home_team} vs {away_team}*\nüîÆ Tipp: `{tip}`\n\n"
        
        # A Markdown form√°z√°s miatt a ParseMode be√°ll√≠t√°sa fontos
        await update.message.reply_text(response_message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Hiba a tippek lek√©r√©se k√∂zben: {e}")
        await update.message.reply_text(f'Hiba t√∂rt√©nt az adatok lek√©r√©se k√∂zben.')

# --- A Telegram alkalmaz√°s be√°ll√≠t√°sa ---
application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("tippek", get_tips))

# --- Webszerver (FastAPI) be√°ll√≠t√°sa ---
api = FastAPI()

@api.on_event("startup")
async def startup_event():
    logger.info("Alkalmaz√°s indul...")
    # Be√°ll√≠tjuk a webhookot a Telegram API fel√©
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
