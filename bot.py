import os
import requests
from supabase import create_client, Client
import asyncio
import logging
from datetime import datetime
import pytz
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
import uvicorn
from fastapi import FastAPI, Request

# ... (a f√°jl eleje v√°ltozatlan)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
try:
    BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    WEBHOOK_URL = os.environ['WEBHOOK_URL']
    SUPABASE_URL = os.environ['SUPABASE_URL']
    SUPABASE_KEY = os.environ['SUPABASE_KEY']
except KeyError as e:
    logger.error(f"Hi√°nyz√≥ k√∂rnyezeti v√°ltoz√≥: {e}")
    exit(1)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Szia! A /tippek paranccsal a mai meccseket, a /stat paranccsal az eredm√©nyeket l√°thatod.')

async def get_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Pillanat, olvasom az odds-sz≈±rt tippeket...')
    try:
        # A bot mostant√≥l az arch√≠vumb√≥l olvassa a m√°r legener√°lt √©s megsz≈±rt tippeket
        response = supabase.table('tipp_elo_zmenyek').select('*').eq('statusz', 'F√ºgg≈ëben').execute()
        records = response.data

        if not records:
            await update.message.reply_text('Jelenleg nincsenek el√©rhet≈ë, sz≈±rt tippek a mai napra.')
            return

        response_message = ""
        now_in_budapest = datetime.now(pytz.timezone("Europe/Budapest"))

        for row in records:
            date_str, meccs_neve, tipp_erteke, odds = row['datum'], row['meccs_neve'], row['tipp_erteke'], row['odds']
            
            start_time_str = "Ismeretlen"
            try:
                utc_dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                budapest_tz = pytz.timezone("Europe/Budapest")
                local_dt = utc_dt.astimezone(budapest_tz)
                if local_dt > now_in_budapest:
                    start_time_str = local_dt.strftime('%H:%M')
                    meccs_neve_safe = meccs_neve.replace("-", "\\-").replace(".", "\\.")
                    tipp_erteke_safe = tipp_erteke.replace("-", "\\-").replace(".", "\\.")
                    
                    response_message += f"‚öΩ *{meccs_neve_safe}*\n"
                    response_message += f"‚è∞ Kezd√©s: *{start_time_str}*\n"
                    response_message += f"üéØ Tipp: `{tipp_erteke_safe}`\n"
                    response_message += f"üìà Odds: *{odds}*\n\n"
            except (ValueError, TypeError):
                logger.warning(f"Ismeretlen d√°tum form√°tum: {date_str}")
        
        if not response_message:
            await update.message.reply_text("Nem tal√°ltam olyan sz≈±rt tippet, ami m√©g nem kezd≈ëd√∂tt el.")
            return
        await update.message.reply_text(response_message, parse_mode=ParseMode.MARKDOWN_V2)

    except Exception as e:
        logger.error(f"Kritikus hiba a tippek lek√©r√©se k√∂zben: {e}", exc_info=True)
        await update.message.reply_text('Hiba t√∂rt√©nt az adatok lek√©r√©se k√∂zben. Ellen≈ërizd a Render napl√≥t!')

# ... (a statisztika √©s a webszerver r√©sz v√°ltozatlan)
async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Pillanat, sz√°molom a statisztik√°kat az arch√≠vumb√≥l...')
    try:
        response = supabase.table('tipp_elo_zmenyek').select('*').in_('statusz', ['Nyert', 'Vesz√≠tett']).execute()
        records = response.data
        if not records:
            await update.message.reply_text('Az arch√≠vum m√©g √ºres, nincsenek ki√©rt√©kelt tippek.')
            return
        stats = {'yesterday': {'wins': 0, 'losses': 0}, 'last_7_days': {'wins': 0, 'losses': 0}, 'last_30_days': {'wins': 0, 'losses': 0}}
        today = datetime.now(pytz.timezone("Europe/Budapest")).date()
        yesterday = today - timedelta(days=1); seven_days_ago = today - timedelta(days=7); thirty_days_ago = today - timedelta(days=30)
        for rec in records:
            try:
                rec_date = datetime.fromisoformat(rec['datum'].replace('Z', '+00:00')).date()
                result = 'wins' if rec['statusz'] == 'Nyert' else 'losses'
                if rec_date == yesterday: stats['yesterday'][result] += 1
                if rec_date >= seven_days_ago: stats['last_7_days'][result] += 1
                if rec_date >= thirty_days_ago: stats['last_30_days'][result] += 1
            except (ValueError, TypeError): continue
        response_message = "üìä *Tippek Eredm√©nyess√©ge*\n\n";
        def calculate_success_rate(wins, losses):
            total = wins + losses
            if total == 0: return "N/A (nincs adat)"
            rate = (wins / total) * 100
            return f"{wins}/{total} ({rate:.1f}%)"
        response_message += f"*Tegnapi nap:*\n`{calculate_success_rate(stats['yesterday']['wins'], stats['yesterday']['losses'])}`\n\n"
        response_message += f"*Elm√∫lt 7 nap:*\n`{calculate_success_rate(stats['last_7_days']['wins'], stats['last_7_days']['losses'])}`\n\n"
        response_message += f"*Elm√∫lt 30 nap:*\n`{calculate_success_rate(stats['last_30_days']['wins'], stats['last_30_days']['losses'])}`"
        await update.message.reply_text(response_message, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"Kritikus hiba a statisztika sz√°mol√°sa k√∂zben: {e}", exc_info=True)
        await update.message.reply_text('Hiba t√∂rt√©nt a statisztika sz√°mol√°sa k√∂zben.')
application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("tippek", get_tips))
application.add_handler(CommandHandler("stat", get_stats))
api = FastAPI()
@api.on_event("startup")
async def startup_event():
    await application.initialize()
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"Webhook sikeresen be√°ll√≠tva a k√∂vetkez≈ë c√≠mre: {WEBHOOK_URL}/telegram")
@api.on_event("shutdown")
async def shutdown_event():
    await application.shutdown()
    logger.info("Alkalmaz√°s le√°llt.")
@api.post("/telegram")
async def telegram_webhook(request: Request):
    update = Update.de_json(data=await request.json(), bot=application.bot)
    await application.process_update(update)
    return {"status": "ok"}