# bot.py (V14.0 - El≈ëfizet≈ëi Modell)

import os
import telegram
import pytz
import math
import requests
import time
import json
import asyncio
import secrets
from functools import wraps
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from supabase import create_client, Client
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# --- Konfigur√°ci√≥ ---
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
HUNGARY_TZ = pytz.timezone('Europe/Budapest')

# --- ADMIN BE√ÅLL√çT√ÅSOK ---
ADMIN_CHAT_ID = 1326707238

# --- Konverzi√≥s √Ållapotok ---
AWAITING_CODE, AWAITING_BROADCAST = range(2)

# --- Dekor√°torok ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: telegram.Update, context: CallbackContext, *args, **kwargs):
        if update.effective_user.id != ADMIN_CHAT_ID: return
        return await func(update, context, *args, **kwargs)
    return wrapped

def subscriber_only(func):
    @wraps(func)
    async def wrapped(update: telegram.Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id == ADMIN_CHAT_ID: # Az admin mindig hozz√°f√©r
            return await func(update, context, *args, **kwargs)
        
        try:
            res = supabase.table("felhasznalok").select("subscription_status").eq("chat_id", user_id).single().execute()
            if res.data and res.data.get("subscription_status") == "active":
                return await func(update, context, *args, **kwargs)
            else:
                await context.bot.send_message(chat_id=user_id, text="Ez a funkci√≥ csak akt√≠v el≈ëfizet≈ëk sz√°m√°ra el√©rhet≈ë. A hozz√°f√©r√©shez a /start paranccsal tudsz megadni egy megh√≠v√≥ k√≥dot.")
        except Exception as e:
            print(f"Hiba az el≈ëfizet≈ë ellen≈ërz√©sekor: {e}")
            await context.bot.send_message(chat_id=user_id, text="Hiba t√∂rt√©nt a jogosults√°g ellen≈ërz√©se k√∂zben.")
    return wrapped

# --- Seg√©df√ºggv√©nyek ---
def get_tip_details(tip_text):
    tip_map = { "Home": "Hazai nyer", "Away": "Vend√©g nyer", "Over 2.5": "G√≥lok 2.5 felett", "Over 1.5": "G√≥lok 1.5 felett", "BTTS": "Mindk√©t csapat szerez g√≥lt", "1X": "Dupla es√©ly: 1X", "X2": "Dupla es√©ly: X2", "Home Over 1.5": "Hazai 1.5 g√≥l felett", "Away Over 1.5": "Vend√©g 1.5 g√≥l felett" }
    return tip_map.get(tip_text, tip_text)

# --- REGISZTR√ÅCI√ìS √âS FELHASZN√ÅL√ìI FUNKCI√ìK ---

async def start(update: telegram.Update, context: CallbackContext):
    user = update.effective_user
    
    try:
        res = supabase.table("felhasznalok").select("subscription_status").eq("chat_id", user.id).single().execute()

        if user.id == ADMIN_CHAT_ID and (not res.data or res.data.get("subscription_status") != "active"):
            supabase.table("felhasznalok").upsert({"chat_id": user.id, "is_active": True, "subscription_status": "active"}, on_conflict="chat_id").execute()
            res.data = {"subscription_status": "active"}

        if res.data and res.data.get("subscription_status") == "active":
            keyboard = [[InlineKeyboardButton("üî• Napi Tutik", callback_data="show_tuti"), InlineKeyboardButton("üìä Eredm√©nyek", callback_data="show_results")], [InlineKeyboardButton("üí∞ Statisztika", callback_data="show_stat_current_month_0")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            welcome_text = (f"√údv √∫jra, {user.first_name}!\n\nHaszn√°ld a gombokat a navig√°ci√≥hoz!")
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            return ConversationHandler.END
        else:
            await update.message.reply_text("Szia! Ez egy priv√°t, megh√≠v√°sos tippad√≥ bot.\n\nA hozz√°f√©r√©shez k√©rlek, add meg az egyszer haszn√°latos megh√≠v√≥ k√≥dodat:")
            return AWAITING_CODE
    except Exception as e:
        print(f"Hiba a start parancsban: {e}")
        await update.message.reply_text("Hiba t√∂rt√©nt. Pr√≥b√°ld √∫jra k√©s≈ëbb.")
        return ConversationHandler.END

async def redeem_code(update: telegram.Update, context: CallbackContext):
    user = update.effective_user
    code_text = update.message.text.strip().upper()
    
    try:
        code_res = supabase.table("invitation_codes").select("id, is_used").eq("code", code_text).single().execute()
        
        if code_res.data and not code_res.data['is_used']:
            code_id = code_res.data['id']
            supabase.table("invitation_codes").update({"is_used": True, "used_by_chat_id": user.id, "used_at": "now()"}).eq("id", code_id).execute()
            supabase.table("felhasznalok").upsert({"chat_id": user.id, "is_active": True, "subscription_status": "active", "used_invitation_code_id": code_id}, on_conflict="chat_id").execute()
            await update.message.reply_text("‚úÖ Sikeres aktiv√°l√°s! √údv a pr√©mium csoportban!\n\nA /start paranccsal b√°rmikor el≈ëhozhatod a men√ºt.")
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå √ârv√©nytelen vagy m√°r felhaszn√°lt k√≥d. Pr√≥b√°ld √∫jra, vagy a /cancel paranccsal l√©pj ki.")
            return AWAITING_CODE
    except Exception as e:
        print(f"Hiba a k√≥dbev√°lt√°skor: {e}")
        await update.message.reply_text("Hiba t√∂rt√©nt a k√≥d ellen≈ërz√©sekor.")
        return ConversationHandler.END

async def cancel_conversation(update: telegram.Update, context: CallbackContext):
    await update.message.reply_text("M≈±velet megszak√≠tva.")
    return ConversationHandler.END

@subscriber_only
async def button_handler(update: telegram.Update, context: CallbackContext):
    # ... (ez a funkci√≥ m√°r csak a @subscriber_only dekor√°tor miatt a bejelentkezett felhaszn√°l√≥knak m≈±k√∂dik)
    pass 

@subscriber_only
async def napi_tuti(update: telegram.Update, context: CallbackContext):
    # ... (a V13.1-es k√≥dja)
    pass

@subscriber_only
async def eredmenyek(update: telegram.Update, context: CallbackContext):
    # ... (a V13.1-es k√≥dja)
    pass
    
@subscriber_only
async def stat(update: telegram.Update, context: CallbackContext, period="current_month", month_offset=0):
    # ... (a V13.1-es k√≥dja)
    pass

# --- ADMIN FUNKCI√ìK ---
@admin_only
async def admin_menu(update: telegram.Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üë• Felhaszn√°l√≥k Sz√°ma", callback_data="admin_show_users")],
        [InlineKeyboardButton("üèõÔ∏è Teljes Statisztika", callback_data="admin_show_all_stats")],
        [InlineKeyboardButton("‚ù§Ô∏è Rendszer St√°tusz", callback_data="admin_check_status")],
        [InlineKeyboardButton("üì£ K√∂r√ºzenet K√ºld√©se", callback_data="admin_broadcast_start")],
        [InlineKeyboardButton("üîç S√©r√ºltek Ellen≈ërz√©se", callback_data="admin_check_tickets")],
        [InlineKeyboardButton("üîë K√≥d Gener√°l√°s", callback_data="admin_generate_codes_start")],
        [InlineKeyboardButton("üö™ Bez√°r√°s", callback_data="admin_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("√údv az Admin Panelben! V√°lassz egy funkci√≥t:", reply_markup=reply_markup)

# ... (a t√∂bbi admin funkci√≥, broadcast, status, check, stb. v√°ltozatlan)

@admin_only
async def admin_generate_codes(update: telegram.Update, context: CallbackContext):
    try:
        count = int(context.args[0]) if context.args else 5
        if count > 50: count = 50

        await update.message.reply_text(f"{count} db k√≥d gener√°l√°sa folyamatban...")
        new_codes, codes_to_insert = [], []
        for _ in range(count):
            code = secrets.token_hex(4).upper()
            new_codes.append(code)
            codes_to_insert.append({'code': code, 'notes': 'Manu√°lisan gener√°lt'})
        
        supabase.table("invitation_codes").insert(codes_to_insert).execute()
        
        await update.message.reply_text(f"‚úÖ {count} db √∫j megh√≠v√≥ k√≥d:\n\n`" + "\n".join(new_codes) + "`", parse_mode='Markdown')
    except (ValueError, IndexError):
        await update.message.reply_text("Haszn√°lat: `/generate_codes [darabsz√°m]` (pl. `/generate_codes 5`)")

# --- Handlerek ---
def add_handlers(application: Application):
    # A regisztr√°ci√≥s folyamat
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ AWAITING_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, redeem_code)] },
        fallbacks=[CommandHandler("cancel", cancel_conversation)]
    )
    application.add_handler(conv_handler)
    
    # Gombkezel≈ë (a ConversationHandler ut√°n, hogy a start gombjai m≈±k√∂djenek)
    application.add_handler(CallbackQueryHandler(button_handler))

    # Manu√°lisan be√≠rhat√≥ parancsok az akt√≠v felhaszn√°l√≥knak
    application.add_handler(CommandHandler("napi_tuti", napi_tuti))
    application.add_handler(CommandHandler("eredmenyek", eredmenyek))
    application.add_handler(CommandHandler("stat", stat))
    
    # Admin parancsok
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CommandHandler("generate_codes", admin_generate_codes))
    
    # Broadcast √ºzenet kezel≈ëje
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_message_handler))

    print("Minden parancs- √©s gombkezel≈ë sikeresen hozz√°adva (El≈ëfizet≈ëi Modell).")
    return application
