# bot.py (Hibrid Modell - Jav√≠tott Eredm√©ny-megjelen√≠t√©ssel)

import os
import telegram
import pytz
import asyncio
import stripe
import requests
from functools import wraps
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from supabase import create_client, Client
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# --- Konfigur√°ci√≥ ---
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
stripe.api_key = os.environ.get("STRIPE_SECRET_KEY")
HUNGARY_TZ = pytz.timezone('Europe/Budapest')

ADMIN_CHAT_ID = 1326707238 # A te Telegram User ID-d
AWAITING_BROADCAST = 0

# --- Seg√©df√ºggv√©nyek ---
def get_db_client():
    return create_client(SUPABASE_URL, SUPABASE_KEY)

HUNGARIAN_MONTHS = ["janu√°r", "febru√°r", "m√°rcius", "√°prilis", "m√°jus", "j√∫nius", "j√∫lius", "augusztus", "szeptember", "okt√≥ber", "november", "december"]

def get_tip_details(tip_text):
    tip_map = { "Home": "Hazai nyer", "Away": "Vend√©g nyer", "Over 2.5": "G√≥lok 2.5 felett", "Over 1.5": "G√≥lok 1.5 felett", "BTTS": "Mindk√©t csapat szerez g√≥lt", "1X": "Dupla es√©ly: 1X", "X2": "Dupla es√©ly: X2" }
    return tip_map.get(tip_text, tip_text)

# --- Dekor√°torok ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: telegram.Update, context: CallbackContext, *args, **kwargs):
        if update.effective_user.id != ADMIN_CHAT_ID: return
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- F≈ê FUNKCI√ìK ---
async def start(update: telegram.Update, context: CallbackContext):
    user = update.effective_user; chat_id = update.effective_chat.id
    if context.args and len(context.args) > 0:
        token = context.args[0]
        def connect_account():
            supabase = get_db_client()
            res = supabase.table("felhasznalok").select("id").eq("telegram_connect_token", token).single().execute()
            if res.data:
                supabase.table("felhasznalok").update({"chat_id": chat_id, "telegram_connect_token": None}).eq("id", res.data['id']).execute()
                return True
            return False
        success = await asyncio.to_thread(connect_account)
        if success: await context.bot.send_message(chat_id=chat_id, text="‚úÖ Sikeres √∂sszek√∂t√©s! Mostant√≥l itt is kapsz √©rtes√≠t√©st a friss tippekr≈ël.")
        else: await context.bot.send_message(chat_id=chat_id, text="‚ùå Hiba: Az √∂sszek√∂t≈ë link √©rv√©nytelen vagy lej√°rt.")
        return
    keyboard = [[InlineKeyboardButton("üöÄ Ugr√°s a Weboldalra", url="https://mondomatutit.hu")]]; reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=f"Szia {user.first_name}! üëã\n\nA szolg√°ltat√°sunk a weboldalunkra k√∂lt√∂z√∂tt. K√©rlek, ott regisztr√°lj √©s fizess el≈ë a tippek megtekint√©s√©hez.", reply_markup=reply_markup)

async def activate_subscription_and_notify_web(user_id: int, duration_days: int, stripe_customer_id: str):
    try:
        def _activate_sync():
            supabase = get_db_client()
            expires_at = datetime.now(pytz.utc) + timedelta(days=duration_days)
            supabase.table("felhasznalok").update({"subscription_status": "active", "subscription_expires_at": expires_at.isoformat(),"stripe_customer_id": stripe_customer_id}).eq("id", user_id).execute()
        await asyncio.to_thread(_activate_sync); print(f"WEB: A(z) {user_id} azonos√≠t√≥j√∫ felhaszn√°l√≥ el≈ëfizet√©se sikeresen aktiv√°lva.")
    except Exception as e: print(f"Hiba a WEBES automatikus aktiv√°l√°s sor√°n (user_id: {user_id}): {e}")

# --- ADMIN FUNKCI√ìK ---

@admin_only
async def admin_menu(update: telegram.Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìä Friss Eredm√©nyek", callback_data="admin_show_results"), InlineKeyboardButton("üìà Statisztik√°k", callback_data="admin_show_stat_current_month_0")],
        [InlineKeyboardButton("üì¨ Napi Tutik Megtekint√©se", callback_data="admin_show_slips")],
        [InlineKeyboardButton("üë• Felh. Sz√°ma", callback_data="admin_show_users"), InlineKeyboardButton("‚ù§Ô∏è Rendszer St√°tusz", callback_data="admin_check_status")],
        [InlineKeyboardButton("üì£ K√∂r√ºzenet", callback_data="admin_broadcast_start")],
        [InlineKeyboardButton("üö™ Bez√°r√°s", callback_data="admin_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Admin Panel:", reply_markup=reply_markup)

def format_slip_for_telegram(szelveny):
    message = f"*{szelveny['tipp_neve']}* (Megb√≠zhat√≥s√°g: *{szelveny['confidence_percent']}%*)\n\n"
    for meccs in szelveny['meccsek']:
        local_time = datetime.fromisoformat(meccs['kezdes'].replace('Z', '+00:00')).astimezone(HUNGARY_TZ)
        kezdes_str = local_time.strftime('%b %d. %H:%M')
        tipp_str = get_tip_details(meccs['tipp'])
        message += f"‚öΩÔ∏è *{meccs['csapat_H']} vs {meccs['csapat_V']}*\n"
        message += f"üèÜ _{meccs['liga_nev']}_\n"
        message += f"‚è∞ Kezd√©s: {kezdes_str}\n"
        message += f"üí° Tipp: {tipp_str} *@{'%.2f' % meccs['odds']}*\n\n"
    message += f"üéØ Ered≈ë odds: *{'%.2f' % szelveny['eredo_odds']}*\n"
    message += "_www.mondomatutit.hu_\n"
    message += "-----------------------------------\n"
    return message

@admin_only
async def admin_show_slips(update: telegram.Update, context: CallbackContext):
    query = update.callback_query; await query.answer()
    message_to_edit = await query.message.edit_text("üì¨ Aktu√°lis Napi Tuti szelv√©nyek keres√©se...")
    try:
        def sync_fetch_slips():
            supabase = get_db_client()
            now_local = datetime.now(HUNGARY_TZ)
            today_str, tomorrow_str = now_local.strftime("%Y-%m-%d"), (now_local + timedelta(days=1)).strftime("%Y-%m-%d")
            filter_value = f"tipp_neve.ilike.*{today_str}*,tipp_neve.ilike.*{tomorrow_str}*"; response = supabase.table("napi_tuti").select("*").or_(filter_value).order('tipp_neve', desc=False).execute()
            if not response.data: return {"today": "", "tomorrow": ""}
            all_tip_ids = [tid for sz in response.data for tid in sz.get('tipp_id_k', [])]
            if not all_tip_ids: return {"today": "", "tomorrow": ""}
            meccsek_map = {m['id']: m for m in supabase.table("meccsek").select("*").in_("id", all_tip_ids).execute().data}
            todays_slips, tomorrows_slips = [], []
            for sz_data in response.data:
                sz_meccsei = [meccsek_map.get(tid) for tid in sz_data.get('tipp_id_k', []) if meccsek_map.get(tid)]
                if sz_meccsei:
                    sz_data['meccsek'] = sz_meccsei
                    if today_str in sz_data['tipp_neve']: todays_slips.append(sz_data)
                    elif tomorrow_str in sz_data['tipp_neve']: tomorrows_slips.append(sz_data)
            todays_message, tomorrows_message = "", ""
            if todays_slips:
                todays_message = "*--- Mai Akt√≠v Szelv√©nyek ---*\n\n"
                for szelveny in todays_slips: todays_message += format_slip_for_telegram(szelveny)
            if tomorrows_slips:
                tomorrows_message = "*--- Holnapi Szelv√©nyek ---*\n\n"
                for szelveny in tomorrows_slips: tomorrows_message += format_slip_for_telegram(szelveny)
            return {"today": todays_message, "tomorrow": tomorrows_message}
        
        messages = await asyncio.to_thread(sync_fetch_slips)
        await message_to_edit.delete()
        
        has_content = False
        if messages.get("today"):
            await context.bot.send_message(chat_id=query.message.chat_id, text=messages["today"], parse_mode='Markdown')
            has_content = True
        if messages.get("tomorrow"):
            await context.bot.send_message(chat_id=query.message.chat_id, text=messages["tomorrow"], parse_mode='Markdown')
            has_content = True
            
        if not has_content:
            await context.bot.send_message(chat_id=query.message.chat_id, text="Nem tal√°lhat√≥ak akt√≠v (mai vagy holnapi) Napi Tuti szelv√©nyek.")

    except Exception as e:
        print(f"Hiba a Napi Tutik lek√©r√©sekor (admin): {e}"); await message_to_edit.edit_text(f"Hiba t√∂rt√©nt: {e}")

# JAV√çTOTT FUNKCI√ì AZ EREDM√âNYEKHEZ
def format_slip_with_results(slip_data, meccsek_map):
    slip_results = [meccsek_map.get(mid, {}).get('eredmeny') for mid in slip_data.get('tipp_id_k', [])]
    overall_status = ""
    # JAV√çTOTT LOGIKA: A vesztes priorit√°st √©lvez
    if 'Vesz√≠tett' in slip_results:
        overall_status = "‚ùå Vesz√≠tett"
    elif 'Tipp leadva' in slip_results or None in slip_results:
        overall_status = "‚è≥ Folyamatban"
    else: # Ha nincs vesztes √©s nincs folyamatban l√©v≈ë, akkor nyert (vagy √©rv√©nytelen)
        overall_status = "‚úÖ Nyert"

    # JAV√çTOTT FORM√ÅZ√ÅS: A csillagok elt√°vol√≠tva a c√≠mb≈ël
    message = f"{slip_data['tipp_neve']}\nSt√°tusz: *{overall_status}*\n\n"
    
    for meccs_id in slip_data.get('tipp_id_k', []):
        meccs = meccsek_map.get(meccs_id)
        if not meccs: continue
        
        local_time = datetime.fromisoformat(meccs['kezdes'].replace('Z', '+00:00')).astimezone(HUNGARY_TZ)
        icon = "‚úÖ" if meccs['eredmeny'] == 'Nyert' else "‚ùå" if meccs['eredmeny'] == 'Vesz√≠tett' else "‚ö™Ô∏è" if meccs['eredmeny'] == '√ârv√©nytelen' else "‚è≥"
        
        message += f"‚öΩÔ∏è {meccs['csapat_H']} vs {meccs['csapat_V']}\n"
        message += f"üèÜ Bajnoks√°g: {meccs['liga_nev']}\n"
        message += f"‚è∞ Kezd√©s: {local_time.strftime('%H:%M')}\n"
        
        if meccs.get('veg_eredmeny') and meccs['eredmeny'] != 'Tipp leadva': message += f"üèÅ V√©geredm√©ny: {meccs['veg_eredmeny']}\n"
        
        tipp_str = get_tip_details(meccs['tipp'])
        indoklas_str = f" ({meccs['indoklas']})" if meccs.get('indoklas') and 'd√∂ntetlen-vesz√©ly' not in meccs.get('indoklas') else ""
        message += f"üí° Tipp: {tipp_str}{indoklas_str} {icon}\n\n"
        
    return message

@admin_only
async def eredmenyek(update: telegram.Update, context: CallbackContext):
    query = update.callback_query; await query.answer()
    initial_message = await context.bot.send_message(chat_id=query.message.chat_id, text="üîé Eredm√©nyek keres√©se a tegnapi √©s mai napra...")
    try:
        def sync_task():
            supabase = get_db_client()
            now_local = datetime.now(HUNGARY_TZ)
            today_str = now_local.strftime("%Y-%m-%d")
            yesterday_str = (now_local - timedelta(days=1)).strftime("%Y-%m-%d")
            
            filter_value = f"tipp_neve.ilike.*{today_str}*,tipp_neve.ilike.*{yesterday_str}*"
            response_tuti = supabase.table("napi_tuti").select("*").or_(filter_value).order('created_at', desc=True).execute()
            
            if not response_tuti.data: return None, None
            
            all_tip_ids = [tid for sz in response_tuti.data for tid in sz.get('tipp_id_k', [])]
            if not all_tip_ids: return response_tuti.data, {}
            
            meccsek_res = supabase.table("meccsek").select("*").in_("id", all_tip_ids).execute()
            meccsek_map = {meccs['id']: meccs for meccs in meccsek_res.data}
            return response_tuti.data, meccsek_map

        slips_to_show, meccsek_map = await asyncio.to_thread(sync_task)
        await initial_message.delete()

        if not slips_to_show:
            await context.bot.send_message(chat_id=query.message.chat_id, text="Nem tal√°lhat√≥ak szelv√©nyek a megadott id≈ëszakban.")
            return

        for slip in slips_to_show:
            formatted_message = format_slip_with_results(slip, meccsek_map)
            await context.bot.send_message(chat_id=query.message.chat_id, text=formatted_message, parse_mode='Markdown')
            await asyncio.sleep(0.5)

    except Exception as e: 
        print(f"Hiba az eredm√©nyek lek√©r√©sekor: {e}"); await initial_message.edit_text("Hiba t√∂rt√©nt.")

@admin_only
async def stat(update: telegram.Update, context: CallbackContext, period="current_month", month_offset=0):
    query = update.callback_query; message_to_edit = await query.message.edit_text("üìà Statisztika k√©sz√≠t√©se..."); await query.answer()
    try:
        def sync_task_stat():
            supabase = get_db_client(); now = datetime.now(HUNGARY_TZ); start_date_utc, header = None, ""
            if period == "all": start_date_utc = datetime(2020, 1, 1).astimezone(pytz.utc); header = "*√ñsszes√≠tett (All-Time) Statisztika*"; return supabase.table("napi_tuti").select("tipp_id_k, eredo_odds", count='exact').gte("created_at", str(start_date_utc)).execute(), header
            else:
                target_month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0) - relativedelta(months=month_offset)
                end_date_utc = ((target_month_start + relativedelta(months=1)) - timedelta(seconds=1)).astimezone(pytz.utc); start_date_utc = target_month_start.astimezone(pytz.utc); header = f"*{target_month_start.year}. {HUNGARIAN_MONTHS[target_month_start.month - 1]}*"; return supabase.table("napi_tuti").select("tipp_id_k, eredo_odds", count='exact').gte("created_at", str(start_date_utc)).lte("created_at", str(end_date_utc)).execute(), header
        response_tuti, header = await asyncio.to_thread(sync_task_stat)
        evaluated_tuti_count, won_tuti_count, total_return_tuti = 0, 0, 0.0; evaluated_singles_count, won_singles_count, total_return_singles = 0, 0, 0.0
        if response_tuti.data:
            all_tip_ids_stat = [tid for sz in response_tuti.data for tid in sz.get('tipp_id_k', [])]
            if all_tip_ids_stat:
                def sync_stat_meccsek(): return get_db_client().table("meccsek").select("id, eredmeny, odds").in_("id", all_tip_ids_stat).execute()
                meccsek_res_stat = await asyncio.to_thread(sync_stat_meccsek); eredmeny_map = {m['id']: m for m in meccsek_res_stat.data}
                for szelveny in response_tuti.data:
                    tipp_id_k = szelveny.get('tipp_id_k', []);
                    if not tipp_id_k: continue
                    results_objects = [eredmeny_map.get(tid) for tid in tipp_id_k];
                    if any(r is None for r in results_objects): continue
                    results = [r['eredmeny'] for r in results_objects]; is_evaluated_combo = False
                    if 'Vesz√≠tett' in results: evaluated_tuti_count += 1; is_evaluated_combo = True
                    elif all(r is not None and r != 'Tipp leadva' for r in results):
                        is_evaluated_combo = True; valid_results = [r for r in results if r != '√ârv√©nytelen']
                        if not valid_results: continue
                        evaluated_tuti_count += 1
                        if all(r == 'Nyert' for r in valid_results): won_tuti_count += 1; total_return_tuti += float(szelveny['eredo_odds'])
                    if is_evaluated_combo:
                        for meccs in results_objects:
                            if meccs['eredmeny'] in ['Nyert', 'Vesz√≠tett']:
                                evaluated_singles_count += 1
                                if meccs['eredmeny'] == 'Nyert': won_singles_count += 1; total_return_singles += float(meccs['odds'])
        stat_message = f"üî• *{header}*\n\n*--- Napi Tuti Statisztika (K√∂t√©sben) ---*\n"
        if evaluated_tuti_count > 0:
            lost_tuti_count = evaluated_tuti_count - won_tuti_count; tuti_win_rate = (won_tuti_count / evaluated_tuti_count * 100) if evaluated_tuti_count > 0 else 0; total_staked_tuti = evaluated_tuti_count * 1.0; net_profit_tuti = total_return_tuti - total_staked_tuti; roi_tuti = (net_profit_tuti / total_staked_tuti * 100) if total_staked_tuti > 0 else 0
            stat_message += f"√ñsszes szelv√©ny: *{evaluated_tuti_count}* db\n‚úÖ Nyert: *{won_tuti_count}* db | ‚ùå Vesz√≠tett: *{lost_tuti_count}* db\nüìà Tal√°lati ar√°ny: *{tuti_win_rate:.2f}%*\nüí∞ Nett√≥ Profit: *{net_profit_tuti:+.2f}* egys√©g {'‚úÖ' if net_profit_tuti >= 0 else '‚ùå'}\nüìà *ROI: {roi_tuti:+.2f}%*\n\n"
        else: stat_message += "Nincsenek m√©g ki√©rt√©kelt Napi Tuti szelv√©nyek.\n\n"
        stat_message += "*--- Single Tippek Statisztik√°ja ---*\n"
        if evaluated_singles_count > 0:
            lost_singles_count = evaluated_singles_count - won_singles_count; single_win_rate = (won_singles_count / evaluated_singles_count * 100) if evaluated_singles_count > 0 else 0; total_staked_singles = evaluated_singles_count * 1.0; net_profit_singles = total_return_singles - total_staked_singles; roi_singles = (net_profit_singles / total_staked_singles * 100) if total_staked_singles > 0 else 0
            stat_message += f"√ñsszes tipp: *{evaluated_singles_count}* db\n‚úÖ Nyert: *{won_singles_count}* db | ‚ùå Vesz√≠tett: *{lost_singles_count}* db\nüìà Tal√°lati ar√°ny: *{single_win_rate:.2f}%*\nüí∞ Nett√≥ Profit: *{net_profit_singles:+.2f}* egys√©g {'‚úÖ' if net_profit_singles >= 0 else '‚ùå'}\nüìà *ROI: {roi_singles:+.2f}%*"
        else: stat_message += "Nincsenek m√©g ki√©rt√©kelt single tippek."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è El≈ëz≈ë H√≥nap", callback_data=f"admin_show_stat_month_{month_offset + 1}"), InlineKeyboardButton("K√∂vetkez≈ë H√≥nap ‚û°Ô∏è", callback_data=f"admin_show_stat_month_{max(0, month_offset - 1)}")], [InlineKeyboardButton("üèõÔ∏è Teljes Statisztika", callback_data="admin_show_stat_all_0")]]
        if period != "current_month" or month_offset > 0: keyboard[1].append(InlineKeyboardButton("üóìÔ∏è Aktu√°lis H√≥nap", callback_data="admin_show_stat_current_month_0"))
        reply_markup = InlineKeyboardMarkup(keyboard); await message_to_edit.edit_text(stat_message, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e: print(f"Hiba a statisztika k√©sz√≠t√©sekor: {e}"); await message_to_edit.edit_text(f"Hiba: {e}")
@admin_only
async def admin_show_users(update: telegram.Update, context: CallbackContext):
    query = update.callback_query; await query.answer()
    try:
        def sync_task(): return get_db_client().table("felhasznalok").select('id', count='exact').execute()
        response = await asyncio.to_thread(sync_task); await query.message.reply_text(f"üë• Regisztr√°lt felhaszn√°l√≥k a weboldalon: {response.count}")
    except Exception as e: await query.message.reply_text(f"Hiba: {e}")
@admin_only
async def admin_check_status(update: telegram.Update, context: CallbackContext):
    query = update.callback_query; await query.answer("Ellen≈ërz√©s ind√≠t√°sa...", cache_time=5); await query.message.edit_text("‚ù§Ô∏è Rendszer ellen≈ërz√©se...")
    def sync_task_check():
        supabase = get_db_client(); status_text = "‚ù§Ô∏è *Rendszer St√°tusz Jelent√©s* ‚ù§Ô∏è\n\n"
        try: supabase.table("meccsek").select('id', count='exact').limit(1).execute(); status_text += "‚úÖ *Supabase*: Kapcsolat rendben\n"
        except Exception as e: status_text += f"‚ùå *Supabase*: Hiba!\n`{e}`\n"
        try:
            url = f"https://api-football-v1.p.rapidapi.com/v3/timezone"; headers = {"X-RapidAPI-Key": os.environ.get("RAPIDAPI_KEY"), "X-RapidAPI-Host": "api-football-v1.p.rapidapi.com"}
            response = requests.get(url, headers=headers, timeout=10); response.raise_for_status()
            if response.json().get('response'): status_text += "‚úÖ *RapidAPI*: Kapcsolat √©s kulcs rendben"
            else: status_text += "‚ö†Ô∏è *RapidAPI*: Kapcsolat rendben, de v√°ratlan v√°lasz!"
        except Exception as e: status_text += f"‚ùå *RapidAPI*: Hiba!\n`{e}`"
        return status_text
    status_text = await asyncio.to_thread(sync_task_check); await query.message.edit_text(status_text, parse_mode='Markdown')
async def cancel_conversation(update: telegram.Update, context: CallbackContext) -> int:
    if 'awaiting_broadcast' in context.user_data: del context.user_data['awaiting_broadcast']
    await update.message.reply_text('M≈±velet megszak√≠tva.'); return ConversationHandler.END
@admin_only
async def admin_broadcast_start(update: telegram.Update, context: CallbackContext):
    query = update.callback_query; context.user_data['awaiting_broadcast'] = True; await query.message.edit_text("Add meg a k√∂r√ºzenetet. (/cancel a megszak√≠t√°shoz)"); return AWAITING_BROADCAST
async def admin_broadcast_message_handler(update: telegram.Update, context: CallbackContext):
    if not context.user_data.get('awaiting_broadcast') or update.effective_user.id != ADMIN_CHAT_ID: return
    del context.user_data['awaiting_broadcast']; message_to_send = update.message.text
    if message_to_send.lower() == "/cancel": await update.message.reply_text("K√∂r√ºzenet k√ºld√©se megszak√≠tva."); return ConversationHandler.END
    await update.message.reply_text("K√∂r√ºzenet k√ºld√©se...")
    try:
        def sync_task_broadcast(): return get_db_client().table("felhasznalok").select("chat_id").not_.is_("chat_id", "null").execute()
        response = await asyncio.to_thread(sync_task_broadcast)
        if not response.data: await update.message.reply_text("Nincsenek √∂sszek√∂t√∂tt Telegram fi√≥kok."); return ConversationHandler.END
        chat_ids = [user['chat_id'] for user in response.data]; sent_count, failed_count = 0, 0
        for chat_id in chat_ids:
            try: await context.bot.send_message(chat_id=chat_id, text=message_to_send); sent_count += 1
            except Exception: failed_count += 1
            await asyncio.sleep(0.1)
        await update.message.reply_text(f"‚úÖ K√∂r√ºzenet kik√ºldve!\nSikeres: {sent_count} | Sikertelen: {failed_count}")
    except Exception as e: await update.message.reply_text(f"‚ùå Hiba a k√ºld√©s k√∂zben: {e}")
    return ConversationHandler.END
@admin_only
async def button_handler(update: telegram.Update, context: CallbackContext):
    query = update.callback_query; command = query.data
    if command.startswith("admin_show_stat_"): parts = command.split("_"); period = "_".join(parts[3:-1]); offset = int(parts[-1]); await stat(update, context, period=period, month_offset=offset)
    elif command == "admin_show_results": await eredmenyek(update, context)
    elif command == "admin_show_users": await admin_show_users(update, context)
    elif command == "admin_check_status": await admin_check_status(update, context)
    elif command == "admin_broadcast_start": await admin_broadcast_start(update, context)
    elif command == "admin_show_slips": await admin_show_slips(update, context)
    elif command == "admin_close": await query.answer(); await query.message.delete()

# --- HANDLER REGISZTR√ÅCI√ì ---
def add_handlers(application: Application):
    broadcast_conv = ConversationHandler(entry_points=[CallbackQueryHandler(admin_broadcast_start, pattern='^admin_broadcast_start$')], states={AWAITING_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_message_handler)]}, fallbacks=[CommandHandler("cancel", cancel_conversation)])
    application.add_handler(CommandHandler("start", start)); application.add_handler(CommandHandler("admin", admin_menu)); application.add_handler(broadcast_conv); application.add_handler(CallbackQueryHandler(button_handler))
    print("Minden parancs- √©s gombkezel≈ë sikeresen hozz√°adva.")
    return application
